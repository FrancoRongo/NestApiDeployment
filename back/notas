npm install @nestjs/typeorm @nestjs/config typeorm pg
importar typeorm en appmodule
Crar archivo en carpeta principal .env.development y meter las variables de entorno
DB_NAME= demo_sql,
DB_HOST=localhost,
DB_PORT=5432,
DB_USERNAME= postgres,
DB_PASSWORD= darklife,

importar en appmodule ConfigModule
imports: [
    ConfigModule.forRoot({
      isGlobal:true,
      envFilePath:"./.env.development",

    }),
    TypeOrmModule.forRootAsync({
      inject:[ConfigService],
      useFactory:(configService: ConfigService) => ({
        type: "postgres",
        database: configService.get('DB_NAME'),
        host:configService.get("DB_HOST"),
        port:configService.get("DB_PORT"),
        username: configService.get("DB_USERNAME"),
        password: configService.get("DB_PASSWORD"),
        entities:[User, Todo],
        synchronize:true,
        logging:true
      })
      
    }),
    UsersModule, TodosModule, ProductsModule, AuthModule],


    creamos las entidades de user y todos
    import { Column, Entity, PrimaryGeneratedColumn } from "typeorm";
import {v4 as uuid} from "uuid";esto sirve para crear un id con valores alatorios
 
@Entity({
    name:"users"
})
export class User {
    @PrimaryGeneratedColumn("uuid")tenemos que ponerle el tipo al id que vamos a cambiar
    id:string= uuid()
    @Column()
    name: string

    @Column()
    email:string;

    @Column()
    createdAt: string;

}
import { Column, Entity, PrimaryGeneratedColumn } from "typeorm";

@Entity({
    name:"todos"
})
export class Todo {
    @PrimaryGeneratedColumn()
    id:number;
    @Column()
    title:string;
    @Column()
    description:string;
    @Column( {default: false})
    isCompleted:boolean;
}
